/**  	import br.mayworm.ui.Slider;		// horizontal Slider	var horizontalThrowSlider:Slider = new Slider(thumb, track);	horizontalThrowSlider.restricted = false;	horizontalThrowSlider.friction = .95;	horizontalThrowSlider.addEventListener(Event.CHANGE, updateHorizontalSlider);	updateHorizontalSlider();	function updateHorizontalSlider(event:Event = null):void {		perc_txt.text = horizontalThrowSlider.percentage.toString() + "%";	}	// verticalSlider	var verticalThrowSlider:Slider = new Slider(vertThumb, vertTrack, false);	verticalThrowSlider.restricted = true;	verticalThrowSlider.friction = 0.75;	verticalThrowSlider.addEventListener(Event.CHANGE, updateVerticalSlider);	updateVerticalSlider();	function updateVerticalSlider(event:Event = null):void {		percVert_txt.text = verticalThrowSlider.percentage.toString() + "%";	}	 */package br.mayworm.ui {		import flash.events.Event;		import flash.display.Stage;			import flash.display.Sprite;		import flash.events.MouseEvent;		public class Slider extends Sprite {				private var _thumb:*;		private var _track:*;		private var _bounds:Object;		private var _currPos:Number = 0;		private var _lastPos:Number = 0;		private var _velocity:Number = 0;		private var _isDragging:Boolean = false;		private var _offSet:Number;		private var _stage:Stage;		private var _friction:Number = .95;		private var _restricted:Boolean;		private var _horizontal:Boolean;						public var autoRemove:Boolean = false;						public function Slider(thumb:*, boundsArea:*, horizontal:Boolean = true) {						_stage = thumb.stage;						if (_stage == null) {								trace("Erro: stage n√£o iniciado");											}else{							_thumb = thumb;				_thumb.buttonMode = true;				_track = boundsArea;								_horizontal = horizontal;											if (_horizontal) {					_bounds = { left: _track.x, right: _track.x + _track.width };									_currPos = _lastPos = _thumb.x;				} else {					_bounds = { left: _track.y, right: _track.y + _track.height };									_currPos = _lastPos = _thumb.y;				}								_thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);				_stage.addEventListener(MouseEvent.MOUSE_UP, generalUpHandler);								if(autoRemove) addEventListener(Event.REMOVED_FROM_STAGE, remove);						}					}					public function remove(e:Event = null):void {						if (autoRemove) removeEventListener(Event.REMOVED_FROM_STAGE, remove);			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, move);			_stage.removeEventListener(Event.ENTER_FRAME, loop);			_thumb.removeEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);			_stage.removeEventListener(MouseEvent.MOUSE_UP, generalUpHandler);		}				public function get percentage():Number {			var perc:Number;			if (_horizontal) {				perc = Math.round( (_thumb.x - _bounds.left) / (_bounds.right - _bounds.left) * 100 );							} else {				perc = Math.round( (_thumb.y - _bounds.left) / (_bounds.right - _bounds.left) * 100 );							}			return perc;		}						public function set restricted(value:Boolean):void {			_restricted = value;		}						public function get restricted():Boolean {			return _restricted;		}						public function set friction(value:Number):void {			_friction = value;		}						public function get friction():Number {			return _friction;		}				private function thumbDownHandler(event:MouseEvent):void {			_isDragging = true;			(_horizontal) ? _offSet = _thumb.mouseX : _offSet = _thumb.mouseY;			_stage.addEventListener(MouseEvent.MOUSE_MOVE, move);			_stage.addEventListener(Event.ENTER_FRAME, loop);		}						private function generalUpHandler(event:MouseEvent):void {			_isDragging = false;			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, move);		}				private function move(e:MouseEvent):void {						if (_horizontal) {				_thumb.x = _thumb.parent.mouseX - _offSet;								if (_thumb.x <= _bounds.left) _thumb.x = _bounds.left;				else if (_thumb.x >= _bounds.right) _thumb.x = _bounds.right;			} else {				_thumb.y = _thumb.parent.mouseY - _offSet;								if (_thumb.y <= _bounds.left) _thumb.y = _bounds.left;				else if (_thumb.y >= _bounds.right) _thumb.y = _bounds.right;			}						e.updateAfterEvent();					}						private function loop(event:Event):void {						if (_isDragging) {				_lastPos = _currPos;				(_horizontal) ? _currPos = _thumb.parent.mouseX : _currPos = _thumb.parent.mouseY;												_velocity = _currPos - _lastPos;			} else {				(_horizontal) ? _thumb.x += _velocity : _thumb.y += _velocity;							}						if (_horizontal) {								if (_thumb.x <= _bounds.left) {					_thumb.x = _bounds.left;					if (!_restricted) _velocity *= -1;				} else if (_thumb.x >= _bounds.right) {					 _thumb.x = _bounds.right;					 if (!_restricted) _velocity *= -1;				}							} else {								if (_thumb.y <= _bounds.left) {					_thumb.y = _bounds.left;					if (!_restricted) _velocity *= -1;				} else if (_thumb.y >= _bounds.right) {					 _thumb.y = _bounds.right;					 if (!_restricted) _velocity *= -1;				}							}						_velocity *= _friction;									dispatchEvent(new Event(Event.CHANGE));					}			}	}